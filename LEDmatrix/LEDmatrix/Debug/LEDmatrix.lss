
LEDmatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00802000  00000ce4  00000d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000119  00802050  00802050  00000dc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fd8  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040b0  00000000  00000000  00007f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa5  00000000  00000000  0000bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000cf80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000460c  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000761  00000000  00000000  00011824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00011f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_71>
 120:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_72>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_83>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 ee       	ldi	r30, 0xE4	; 228
 21c:	fc e0       	ldi	r31, 0x0C	; 12
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 35       	cpi	r26, 0x50	; 80
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	21 e2       	ldi	r18, 0x21	; 33
 232:	a0 e5       	ldi	r26, 0x50	; 80
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a9 36       	cpi	r26, 0x69	; 105
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 66 05 	call	0xacc	; 0xacc <main>
 244:	0c 94 70 06 	jmp	0xce0	; 0xce0 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 24c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 24e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 250:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 254:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 258:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 25a:	fc cf       	rjmp	.-8      	; 0x254 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 25c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 25e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 262:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 26a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 26e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz
	;ldi r24, 0b00010100 ; 4Mhz
	sts CLK_PSCTRL, r24
 270:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 274:	8f 91       	pop	r24

 276:	08 95       	ret

00000278 <joystick_adc_init>:
#define PER_ADC ((2000000/64)/100)

void joystick_adc_init(void)
{
	// Signed, 12-bit conversion, right adjusted, Normal mode
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
 278:	e0 e0       	ldi	r30, 0x00	; 0
 27a:	f2 e0       	ldi	r31, 0x02	; 2
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	81 83       	std	Z+1, r24	; 0x01
	
	// 2.5V reference voltage on PORTB pin 0
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
	
	// Set prescaler to 512
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	84 83       	std	Z+4, r24	; 0x04
	
	// Single ended - x axis
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 a3       	std	Z+32, r24	; 0x20
	
	// Single ended - y axis
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 28e:	80 a7       	std	Z+40, r24	; 0x28
	
	// Measure voltage on PORTA pin 0
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
 290:	11 a2       	std	Z+33, r1	; 0x21
	
	// Measure voltage on PORTA pin 1
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
 292:	98 e0       	ldi	r25, 0x08	; 8
 294:	91 a7       	std	Z+41, r25	; 0x29
	
	// Cause low-level interrupt on CH0 when conversion is complete
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 296:	82 a3       	std	Z+34, r24	; 0x22
	
	// Cause low-level interrupt on CH0 when conversion is complete
	ADCA.CH1.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 298:	82 a7       	std	Z+42, r24	; 0x2a
	
	// Event channel 0 to cause ADC to start conversion on ADCA.CH0 and ADCA.CH1
	ADCA.EVCTRL = ADC_SWEEP_01_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SWEEP_gc;
 29a:	95 e4       	ldi	r25, 0x45	; 69
 29c:	93 83       	std	Z+3, r25	; 0x03
	
	// Enable ADC
	ADCA.CTRLA = ADC_ENABLE_bm;
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <joystick_tcc1_init>:
}

void joystick_tcc1_init(void)
{
	TCC1.PER = PER_ADC;
 2a2:	e0 e4       	ldi	r30, 0x40	; 64
 2a4:	f8 e0       	ldi	r31, 0x08	; 8
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	86 a3       	std	Z+38, r24	; 0x26
 2ac:	97 a3       	std	Z+39, r25	; 0x27
	
	// TCC0 overflow to cause event on channel 0
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC1_OVF_gc;
 2ae:	88 ec       	ldi	r24, 0xC8	; 200
 2b0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize TCC0 with prescaler 64
	TCC1.CTRLA = TC_CLKSEL_DIV64_gc;
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	80 83       	st	Z, r24
 2b8:	08 95       	ret

000002ba <matrix_init>:
#define PORTC_row_bm (0b11001011)

void matrix_init(void)
{
	// Sets all columns to 1 and rows to 0
	PORTC.OUT = PORTC_col_bm;
 2ba:	a0 e4       	ldi	r26, 0x40	; 64
 2bc:	b6 e0       	ldi	r27, 0x06	; 6
 2be:	84 e3       	ldi	r24, 0x34	; 52
 2c0:	14 96       	adiw	r26, 0x04	; 4
 2c2:	8c 93       	st	X, r24
 2c4:	14 97       	sbiw	r26, 0x04	; 4
	PORTF.OUT = PORTF_col_bm;
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f6 e0       	ldi	r31, 0x06	; 6
 2ca:	86 ed       	ldi	r24, 0xD6	; 214
 2cc:	84 83       	std	Z+4, r24	; 0x04
	
	PORTC.DIRSET = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	11 96       	adiw	r26, 0x01	; 1
 2d2:	8c 93       	st	X, r24
	PORTF.DIRSET = 0xFF;	
 2d4:	81 83       	std	Z+1, r24	; 0x01
 2d6:	08 95       	ret

000002d8 <matrix_turnon>:
}

void matrix_turnon(uint8_t row, uint8_t col)
{
	// Sets all columns to 1 and rows to 0
	PORTC.OUT = PORTC_col_bm;
 2d8:	94 e3       	ldi	r25, 0x34	; 52
 2da:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
	PORTF.OUT = PORTF_col_bm;
 2de:	96 ed       	ldi	r25, 0xD6	; 214
 2e0:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <__TEXT_REGION_LENGTH__+0x7006a4>
		
	if (col == 0)
 2e4:	61 11       	cpse	r22, r1
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <matrix_turnon+0x18>
	{
		PORTF.OUTCLR = (1<<4);
 2e8:	90 e1       	ldi	r25, 0x10	; 16
 2ea:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 2ee:	29 c0       	rjmp	.+82     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 1)
 2f0:	61 30       	cpi	r22, 0x01	; 1
 2f2:	21 f4       	brne	.+8      	; 0x2fc <matrix_turnon+0x24>
	{
		PORTC.OUTCLR = (1<<5); 
 2f4:	90 e2       	ldi	r25, 0x20	; 32
 2f6:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 2fa:	23 c0       	rjmp	.+70     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 2)
 2fc:	62 30       	cpi	r22, 0x02	; 2
 2fe:	21 f4       	brne	.+8      	; 0x308 <matrix_turnon+0x30>
	{
		PORTC.OUTCLR = (1<<4);
 300:	90 e1       	ldi	r25, 0x10	; 16
 302:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 306:	1d c0       	rjmp	.+58     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 3)
 308:	63 30       	cpi	r22, 0x03	; 3
 30a:	21 f4       	brne	.+8      	; 0x314 <matrix_turnon+0x3c>
	{
		PORTF.OUTCLR = (1<<1);
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 312:	17 c0       	rjmp	.+46     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 4)
 314:	64 30       	cpi	r22, 0x04	; 4
 316:	21 f4       	brne	.+8      	; 0x320 <matrix_turnon+0x48>
	{
		PORTC.OUTCLR = (1<<2);
 318:	94 e0       	ldi	r25, 0x04	; 4
 31a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 31e:	11 c0       	rjmp	.+34     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 5)
 320:	65 30       	cpi	r22, 0x05	; 5
 322:	21 f4       	brne	.+8      	; 0x32c <matrix_turnon+0x54>
	{
		PORTF.OUTCLR = (1<<2);
 324:	94 e0       	ldi	r25, 0x04	; 4
 326:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 32a:	0b c0       	rjmp	.+22     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 6)
 32c:	66 30       	cpi	r22, 0x06	; 6
 32e:	21 f4       	brne	.+8      	; 0x338 <matrix_turnon+0x60>
	{
		PORTF.OUTCLR = (1<<6);
 330:	90 e4       	ldi	r25, 0x40	; 64
 332:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 336:	05 c0       	rjmp	.+10     	; 0x342 <matrix_turnon+0x6a>
	}
	else if (col == 7)
 338:	67 30       	cpi	r22, 0x07	; 7
 33a:	19 f4       	brne	.+6      	; 0x342 <matrix_turnon+0x6a>
	{
		PORTF.OUTCLR = (1<<7);
 33c:	90 e8       	ldi	r25, 0x80	; 128
 33e:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
	}
	if (row & (1<<7))
 342:	88 23       	and	r24, r24
 344:	1c f4       	brge	.+6      	; 0x34c <matrix_turnon+0x74>
	{
		PORTC.OUTSET = (1<<3);
 346:	98 e0       	ldi	r25, 0x08	; 8
 348:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	}
	if (row & (1<<6))
 34c:	86 ff       	sbrs	r24, 6
 34e:	03 c0       	rjmp	.+6      	; 0x356 <matrix_turnon+0x7e>
	{
		PORTC.OUTSET = (1<<6);
 350:	90 e4       	ldi	r25, 0x40	; 64
 352:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	}
	if (row & (1<<5))
 356:	85 ff       	sbrs	r24, 5
 358:	03 c0       	rjmp	.+6      	; 0x360 <matrix_turnon+0x88>
	{
		PORTC.OUTSET = (1<<1);
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	}
	if (row & (1<<4))
 360:	84 ff       	sbrs	r24, 4
 362:	03 c0       	rjmp	.+6      	; 0x36a <matrix_turnon+0x92>
	{
		PORTC.OUTSET = (1<<7);
 364:	90 e8       	ldi	r25, 0x80	; 128
 366:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	}
	if (row & (1<<3))
 36a:	83 ff       	sbrs	r24, 3
 36c:	03 c0       	rjmp	.+6      	; 0x374 <matrix_turnon+0x9c>
	{
		PORTF.OUTSET = (1<<3);
 36e:	98 e0       	ldi	r25, 0x08	; 8
 370:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	}
	if (row & (1<<2))
 374:	82 ff       	sbrs	r24, 2
 376:	03 c0       	rjmp	.+6      	; 0x37e <matrix_turnon+0xa6>
	{
		PORTC.OUTSET = (1<<0);
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	}
	if (row & (1<<1))
 37e:	81 ff       	sbrs	r24, 1
 380:	03 c0       	rjmp	.+6      	; 0x388 <matrix_turnon+0xb0>
	{
		PORTF.OUTSET = (1<<5);
 382:	90 e2       	ldi	r25, 0x20	; 32
 384:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	}
	if (row & (1<<0))
 388:	80 ff       	sbrs	r24, 0
 38a:	03 c0       	rjmp	.+6      	; 0x392 <matrix_turnon+0xba>
	{
		PORTF.OUTSET = (1<<0);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 392:	08 95       	ret

00000394 <refreshmatrix_init>:
}

// Initializes TCC0 interrupts for refresh matrix display
void refreshmatrix_init(void)
{
	TCC0.PER = 20;
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f8 e0       	ldi	r31, 0x08	; 8
 398:	84 e1       	ldi	r24, 0x14	; 20
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	86 a3       	std	Z+38, r24	; 0x26
 39e:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	80 83       	st	Z, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	86 83       	std	Z+6, r24	; 0x06
 3a8:	08 95       	ret

000003aa <clear_matrix>:
{
	TCD0.PER = time;
	TCD0.CNT = 0;
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
	while(!(TCD0.INTFLAGS & TC0_OVFIF_bm));
	TCD0.INTFLAGS = TC0_OVFIF_bm;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	e6 5a       	subi	r30, 0xA6	; 166
 3b2:	fe 4d       	sbci	r31, 0xDE	; 222
 3b4:	10 82       	st	Z, r1
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	91 05       	cpc	r25, r1
 3bc:	c1 f7       	brne	.-16     	; 0x3ae <clear_matrix+0x4>
 3be:	08 95       	ret

000003c0 <get_direction>:
// Returns direction that snake is traveling
char get_direction()
// X axis takes priority
{
	// Left
	if (x_axis > 1800)
 3c0:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <x_axis>
 3c4:	90 91 59 21 	lds	r25, 0x2159	; 0x802159 <x_axis+0x1>
 3c8:	89 30       	cpi	r24, 0x09	; 9
 3ca:	97 40       	sbci	r25, 0x07	; 7
 3cc:	bc f4       	brge	.+46     	; 0x3fc <get_direction+0x3c>
		return 'l';
	// Right
	else if (x_axis < 200)
 3ce:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <x_axis>
 3d2:	90 91 59 21 	lds	r25, 0x2159	; 0x802159 <x_axis+0x1>
 3d6:	88 3c       	cpi	r24, 0xC8	; 200
 3d8:	91 05       	cpc	r25, r1
 3da:	94 f0       	brlt	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
		return 'r';
	// Up
	else if (y_axis > 1800)
 3dc:	80 91 66 21 	lds	r24, 0x2166	; 0x802166 <y_axis>
 3e0:	90 91 67 21 	lds	r25, 0x2167	; 0x802167 <y_axis+0x1>
 3e4:	89 30       	cpi	r24, 0x09	; 9
 3e6:	97 40       	sbci	r25, 0x07	; 7
 3e8:	6c f4       	brge	.+26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		return 'u';
	// Down
	else if (y_axis < 200)
 3ea:	80 91 66 21 	lds	r24, 0x2166	; 0x802166 <y_axis>
 3ee:	90 91 67 21 	lds	r25, 0x2167	; 0x802167 <y_axis+0x1>
 3f2:	88 3c       	cpi	r24, 0xC8	; 200
 3f4:	91 05       	cpc	r25, r1
 3f6:	44 f0       	brlt	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		return 'd';
		
	return 0; 
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
char get_direction()
// X axis takes priority
{
	// Left
	if (x_axis > 1800)
		return 'l';
 3fc:	8c e6       	ldi	r24, 0x6C	; 108
 3fe:	08 95       	ret
	// Right
	else if (x_axis < 200)
		return 'r';
 400:	82 e7       	ldi	r24, 0x72	; 114
 402:	08 95       	ret
	// Up
	else if (y_axis > 1800)
		return 'u';
 404:	85 e7       	ldi	r24, 0x75	; 117
 406:	08 95       	ret
	// Down
	else if (y_axis < 200)
		return 'd';
 408:	84 e6       	ldi	r24, 0x64	; 100
		
	return 0; 
}
 40a:	08 95       	ret

0000040c <draw_snake>:
	apple_init();
}

// Draw snake on LED Matrix
void draw_snake()
{	
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
	// Draw snake
	for (uint8_t i = 0; i < length; i++)
 414:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <length>
 418:	22 23       	and	r18, r18
 41a:	09 f4       	brne	.+2      	; 0x41e <draw_snake+0x12>
 41c:	3e c0       	rjmp	.+124    	; 0x49a <draw_snake+0x8e>
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	2f 5f       	subi	r18, 0xFF	; 255
 424:	3f 4f       	sbci	r19, 0xFF	; 255
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
	{
		// If snake value exists then set value
		if (snake[i].x != -1 && snake[i].y != -1)
		{
			led_matrix[7-snake[i].y] |= (0x80 >> snake[i].x);
 42a:	67 e0       	ldi	r22, 0x07	; 7
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	40 e8       	ldi	r20, 0x80	; 128
 430:	50 e0       	ldi	r21, 0x00	; 0
{	
	// Draw snake
	for (uint8_t i = 0; i < length; i++)
	{
		// If snake value exists then set value
		if (snake[i].x != -1 && snake[i].y != -1)
 432:	fc 01       	movw	r30, r24
 434:	dc 01       	movw	r26, r24
 436:	aa 0f       	add	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	aa 0f       	add	r26, r26
 43c:	bb 1f       	adc	r27, r27
 43e:	ad 5a       	subi	r26, 0xAD	; 173
 440:	bf 4d       	sbci	r27, 0xDF	; 223
 442:	ac 91       	ld	r26, X
 444:	af 3f       	cpi	r26, 0xFF	; 255
 446:	29 f1       	breq	.+74     	; 0x492 <draw_snake+0x86>
 448:	dc 01       	movw	r26, r24
 44a:	aa 0f       	add	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	aa 0f       	add	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	ad 5a       	subi	r26, 0xAD	; 173
 454:	bf 4d       	sbci	r27, 0xDF	; 223
 456:	11 96       	adiw	r26, 0x01	; 1
 458:	ac 91       	ld	r26, X
 45a:	af 3f       	cpi	r26, 0xFF	; 255
 45c:	d1 f0       	breq	.+52     	; 0x492 <draw_snake+0x86>
		{
			led_matrix[7-snake[i].y] |= (0x80 >> snake[i].x);
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	ed 5a       	subi	r30, 0xAD	; 173
 468:	ff 4d       	sbci	r31, 0xDF	; 223
 46a:	a0 81       	ld	r26, Z
 46c:	e1 81       	ldd	r30, Z+1	; 0x01
 46e:	8b 01       	movw	r16, r22
 470:	0e 1b       	sub	r16, r30
 472:	11 09       	sbc	r17, r1
 474:	e7 fd       	sbrc	r30, 7
 476:	13 95       	inc	r17
 478:	f8 01       	movw	r30, r16
 47a:	e6 5a       	subi	r30, 0xA6	; 166
 47c:	fe 4d       	sbci	r31, 0xDE	; 222
 47e:	c0 81       	ld	r28, Z
 480:	8a 01       	movw	r16, r20
 482:	02 c0       	rjmp	.+4      	; 0x488 <draw_snake+0x7c>
 484:	15 95       	asr	r17
 486:	07 95       	ror	r16
 488:	aa 95       	dec	r26
 48a:	e2 f7       	brpl	.-8      	; 0x484 <draw_snake+0x78>
 48c:	d8 01       	movw	r26, r16
 48e:	ac 2b       	or	r26, r28
 490:	a0 83       	st	Z, r26
 492:	01 96       	adiw	r24, 0x01	; 1

// Draw snake on LED Matrix
void draw_snake()
{	
	// Draw snake
	for (uint8_t i = 0; i < length; i++)
 494:	82 17       	cp	r24, r18
 496:	93 07       	cpc	r25, r19
 498:	61 f6       	brne	.-104    	; 0x432 <draw_snake+0x26>
			led_matrix[7-snake[i].y] |= (0x80 >> snake[i].x);
		}
	}

	// Draw apple
	led_matrix[7-apple.y] |= (0x80 >> apple.x);
 49a:	e2 e6       	ldi	r30, 0x62	; 98
 49c:	f1 e2       	ldi	r31, 0x21	; 33
 49e:	30 81       	ld	r19, Z
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	e7 e0       	ldi	r30, 0x07	; 7
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	e8 1b       	sub	r30, r24
 4a8:	f1 09       	sbc	r31, r1
 4aa:	87 fd       	sbrc	r24, 7
 4ac:	f3 95       	inc	r31
 4ae:	e6 5a       	subi	r30, 0xA6	; 166
 4b0:	fe 4d       	sbci	r31, 0xDE	; 222
 4b2:	20 81       	ld	r18, Z
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <draw_snake+0xb2>
 4ba:	95 95       	asr	r25
 4bc:	87 95       	ror	r24
 4be:	3a 95       	dec	r19
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <draw_snake+0xae>
 4c2:	82 2b       	or	r24, r18
 4c4:	80 83       	st	Z, r24
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	08 95       	ret

000004d0 <automove_init>:
}

// Initialize automove timer (TCD1)
void automove_init()
{
	TCD1.PER = TCD1_AUTOMOVE_PER;
 4d0:	e0 e4       	ldi	r30, 0x40	; 64
 4d2:	f9 e0       	ldi	r31, 0x09	; 9
 4d4:	84 e6       	ldi	r24, 0x64	; 100
 4d6:	99 e1       	ldi	r25, 0x19	; 25
 4d8:	86 a3       	std	Z+38, r24	; 0x26
 4da:	97 a3       	std	Z+39, r25	; 0x27
	TCD1.CTRLA = TC_CLKSEL_DIV1024_gc;
 4dc:	87 e0       	ldi	r24, 0x07	; 7
 4de:	80 83       	st	Z, r24
	TCD1.INTCTRLA = TC_OVFINTLVL_MED_gc;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	86 83       	std	Z+6, r24	; 0x06
 4e4:	08 95       	ret

000004e6 <display_image>:
	
}

// Display particular image to LED Matrix
void display_image(const uint8_t image[])
{
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++)
	{
		led_matrix[i] = image[i];
 4ec:	81 91       	ld	r24, Z+
 4ee:	d9 01       	movw	r26, r18
 4f0:	a6 5a       	subi	r26, 0xA6	; 166
 4f2:	be 4d       	sbci	r27, 0xDE	; 222
 4f4:	8c 93       	st	X, r24
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Display particular image to LED Matrix
void display_image(const uint8_t image[])
{
	for (uint8_t i = 0; i < 8; i++)
 4fa:	28 30       	cpi	r18, 0x08	; 8
 4fc:	31 05       	cpc	r19, r1
 4fe:	b1 f7       	brne	.-20     	; 0x4ec <display_image+0x6>
	{
		led_matrix[i] = image[i];
	}
}
 500:	08 95       	ret

00000502 <in_snake>:

// Checks if point is in the snake
uint8_t in_snake(int8_t x, int8_t y)
{
	for (uint8_t i = 0; i < length; i++)
 502:	40 91 53 21 	lds	r20, 0x2153	; 0x802153 <length>
 506:	44 23       	and	r20, r20
 508:	11 f1       	breq	.+68     	; 0x54e <in_snake+0x4c>
 50a:	41 50       	subi	r20, 0x01	; 1
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	4f 5f       	subi	r20, 0xFF	; 255
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (x == snake[i].x && y == snake[i].y)
 516:	f9 01       	movw	r30, r18
 518:	ee 0f       	add	r30, r30
 51a:	ff 1f       	adc	r31, r31
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	ed 5a       	subi	r30, 0xAD	; 173
 522:	ff 4d       	sbci	r31, 0xDF	; 223
 524:	90 81       	ld	r25, Z
 526:	98 13       	cpse	r25, r24
 528:	0a c0       	rjmp	.+20     	; 0x53e <in_snake+0x3c>
 52a:	f9 01       	movw	r30, r18
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	ed 5a       	subi	r30, 0xAD	; 173
 536:	ff 4d       	sbci	r31, 0xDF	; 223
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	96 17       	cp	r25, r22
 53c:	39 f0       	breq	.+14     	; 0x54c <in_snake+0x4a>
 53e:	2f 5f       	subi	r18, 0xFF	; 255
 540:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Checks if point is in the snake
uint8_t in_snake(int8_t x, int8_t y)
{
	for (uint8_t i = 0; i < length; i++)
 542:	24 17       	cp	r18, r20
 544:	35 07       	cpc	r19, r21
 546:	39 f7       	brne	.-50     	; 0x516 <in_snake+0x14>
	{
		if (x == snake[i].x && y == snake[i].y)
			return 1;
	}
	return 0;
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	01 c0       	rjmp	.+2      	; 0x54e <in_snake+0x4c>
uint8_t in_snake(int8_t x, int8_t y)
{
	for (uint8_t i = 0; i < length; i++)
	{
		if (x == snake[i].x && y == snake[i].y)
			return 1;
 54c:	41 e0       	ldi	r20, 0x01	; 1
	}
	return 0;
}
 54e:	84 2f       	mov	r24, r20
 550:	08 95       	ret

00000552 <apple_init>:

// Initializes apple creation
void apple_init()
{
	apple.x = 6;
 552:	e2 e6       	ldi	r30, 0x62	; 98
 554:	f1 e2       	ldi	r31, 0x21	; 33
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	80 83       	st	Z, r24
	apple.y = 3;
 55a:	83 e0       	ldi	r24, 0x03	; 3
 55c:	81 83       	std	Z+1, r24	; 0x01
 55e:	08 95       	ret

00000560 <snake_init>:
	return 0; 
}

// Initializing snake
void snake_init()
{
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
	// Initialize all values to -1
	for (uint8_t i = 0; i < 64; i++)
	{
		snake[i].x = -1;
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	fc 01       	movw	r30, r24
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	ed 5a       	subi	r30, 0xAD	; 173
 572:	ff 4d       	sbci	r31, 0xDF	; 223
 574:	20 83       	st	Z, r18
		snake[i].y = -1;
 576:	21 83       	std	Z+1, r18	; 0x01
		snake[i].next = NULL;
 578:	12 82       	std	Z+2, r1	; 0x02
 57a:	13 82       	std	Z+3, r1	; 0x03
 57c:	01 96       	adiw	r24, 0x01	; 1

// Initializing snake
void snake_init()
{
	// Initialize all values to -1
	for (uint8_t i = 0; i < 64; i++)
 57e:	80 34       	cpi	r24, 0x40	; 64
 580:	91 05       	cpc	r25, r1
 582:	89 f7       	brne	.-30     	; 0x566 <snake_init+0x6>
		snake[i].y = -1;
		snake[i].next = NULL;
	}
	
	// Initialize starting point of snake
	snake[0].x = 0;
 584:	e3 e5       	ldi	r30, 0x53	; 83
 586:	f0 e2       	ldi	r31, 0x20	; 32
 588:	10 82       	st	Z, r1
	snake[0].y = 3;
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	81 83       	std	Z+1, r24	; 0x01
	snake[0].next = &snake[1];
 58e:	27 e5       	ldi	r18, 0x57	; 87
 590:	30 e2       	ldi	r19, 0x20	; 32
 592:	22 83       	std	Z+2, r18	; 0x02
 594:	33 83       	std	Z+3, r19	; 0x03
	snake[1].x = 1;
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	94 83       	std	Z+4, r25	; 0x04
	snake[1].y = 3;
 59a:	85 83       	std	Z+5, r24	; 0x05
	snake[1].next = &snake[2];
 59c:	2b e5       	ldi	r18, 0x5B	; 91
 59e:	30 e2       	ldi	r19, 0x20	; 32
 5a0:	26 83       	std	Z+6, r18	; 0x06
 5a2:	37 83       	std	Z+7, r19	; 0x07
	snake[2].x = 2;
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	90 87       	std	Z+8, r25	; 0x08
	snake[2].y = 3;
 5a8:	81 87       	std	Z+9, r24	; 0x09

	// Initialize head and tail
	tail = &snake[0];
 5aa:	e0 93 54 21 	sts	0x2154, r30	; 0x802154 <tail>
 5ae:	f0 93 55 21 	sts	0x2155, r31	; 0x802155 <tail+0x1>
	head = &snake[2];
 5b2:	20 93 56 21 	sts	0x2156, r18	; 0x802156 <head>
 5b6:	30 93 57 21 	sts	0x2157, r19	; 0x802157 <head+0x1>
	
	length = 3;
 5ba:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <length>
	
	movedir = 'r';
 5be:	82 e7       	ldi	r24, 0x72	; 114
 5c0:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
	
	apple_init();
 5c4:	0e 94 a9 02 	call	0x552	; 0x552 <apple_init>
 5c8:	08 95       	ret

000005ca <apple_new>:
	apple.y = 3;
}

// Generates location of new apple
void apple_new()
{
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
	uint8_t x = TCC0.CNTL & (0b00000111);
 5d2:	e0 e0       	ldi	r30, 0x00	; 0
 5d4:	f8 e0       	ldi	r31, 0x08	; 8
 5d6:	d0 a1       	ldd	r29, Z+32	; 0x20
 5d8:	d7 70       	andi	r29, 0x07	; 7
	uint8_t y = (TCC0.CNTL >> 1) & (0b00000111);
 5da:	c0 a1       	ldd	r28, Z+32	; 0x20
 5dc:	c6 95       	lsr	r28
 5de:	c7 70       	andi	r28, 0x07	; 7
	
	while ((in_snake(x,y)))
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <apple_new+0x28>
	{
		x++;
 5e2:	df 5f       	subi	r29, 0xFF	; 255
		if (x == 8)
 5e4:	d8 30       	cpi	r29, 0x08	; 8
 5e6:	09 f4       	brne	.+2      	; 0x5ea <apple_new+0x20>
			x = 0;
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
		y++;
 5ea:	cf 5f       	subi	r28, 0xFF	; 255
		if (y == 8)
 5ec:	c8 30       	cpi	r28, 0x08	; 8
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <apple_new+0x28>
			y = 0;
 5f0:	c0 e0       	ldi	r28, 0x00	; 0
void apple_new()
{
	uint8_t x = TCC0.CNTL & (0b00000111);
	uint8_t y = (TCC0.CNTL >> 1) & (0b00000111);
	
	while ((in_snake(x,y)))
 5f2:	6c 2f       	mov	r22, r28
 5f4:	8d 2f       	mov	r24, r29
 5f6:	0e 94 81 02 	call	0x502	; 0x502 <in_snake>
 5fa:	81 11       	cpse	r24, r1
 5fc:	f2 cf       	rjmp	.-28     	; 0x5e2 <apple_new+0x18>
		y++;
		if (y == 8)
			y = 0;
	}
	
	apple.x = x;
 5fe:	e2 e6       	ldi	r30, 0x62	; 98
 600:	f1 e2       	ldi	r31, 0x21	; 33
 602:	d0 83       	st	Z, r29
	apple.y = y;
 604:	c1 83       	std	Z+1, r28	; 0x01
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <move_snake>:
	led_matrix[7-apple.y] |= (0x80 >> apple.x);
}

// Move snake in certain direction and marks
void move_snake(char dir)
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
	uint8_t apple_eaten = 0;
	
	// Move up
	if (dir == 'u' && movedir != 'd')
 614:	85 37       	cpi	r24, 0x75	; 117
 616:	09 f0       	breq	.+2      	; 0x61a <move_snake+0xa>
 618:	80 c0       	rjmp	.+256    	; 0x71a <move_snake+0x10a>
 61a:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 61e:	84 36       	cpi	r24, 0x64	; 100
 620:	09 f4       	brne	.+2      	; 0x624 <move_snake+0x14>
 622:	03 c2       	rjmp	.+1030   	; 0xa2a <move_snake+0x41a>
	{
		// Collide into wall
		if (head->y >= 7)
 624:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 628:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 62c:	81 81       	ldd	r24, Z+1	; 0x01
 62e:	87 30       	cpi	r24, 0x07	; 7
 630:	24 f0       	brlt	.+8      	; 0x63a <move_snake+0x2a>
		{
			collide = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 638:	f8 c1       	rjmp	.+1008   	; 0xa2a <move_snake+0x41a>
		}
		// Collide into self
		else if (in_snake(head->x, head->y+1))
 63a:	61 81       	ldd	r22, Z+1	; 0x01
 63c:	80 81       	ld	r24, Z
 63e:	6f 5f       	subi	r22, 0xFF	; 255
 640:	0e 94 81 02 	call	0x502	; 0x502 <in_snake>
 644:	88 23       	and	r24, r24
 646:	21 f0       	breq	.+8      	; 0x650 <move_snake+0x40>
		{
			collide = 2;
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 64e:	ed c1       	rjmp	.+986    	; 0xa2a <move_snake+0x41a>
		}
		// Collide into apple
		else if (head->x == apple.x && head->y+1 == apple.y)
 650:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 654:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 658:	90 81       	ld	r25, Z
 65a:	80 91 62 21 	lds	r24, 0x2162	; 0x802162 <apple>
 65e:	98 13       	cpse	r25, r24
 660:	2c c0       	rjmp	.+88     	; 0x6ba <move_snake+0xaa>
 662:	81 81       	ldd	r24, Z+1	; 0x01
 664:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <apple+0x1>
 668:	08 2e       	mov	r0, r24
 66a:	00 0c       	add	r0, r0
 66c:	99 0b       	sbc	r25, r25
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	02 2e       	mov	r0, r18
 672:	00 0c       	add	r0, r0
 674:	33 0b       	sbc	r19, r19
 676:	82 17       	cp	r24, r18
 678:	93 07       	cpc	r25, r19
 67a:	f9 f4       	brne	.+62     	; 0x6ba <move_snake+0xaa>
		{
			// Add apple to the head of the snake
			snake[length].x = apple.x;
 67c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <length>
 680:	a8 2f       	mov	r26, r24
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	c2 e6       	ldi	r28, 0x62	; 98
 686:	d1 e2       	ldi	r29, 0x21	; 33
 688:	98 81       	ld	r25, Y
 68a:	aa 0f       	add	r26, r26
 68c:	bb 1f       	adc	r27, r27
 68e:	aa 0f       	add	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	ad 5a       	subi	r26, 0xAD	; 173
 694:	bf 4d       	sbci	r27, 0xDF	; 223
 696:	9c 93       	st	X, r25
			snake[length].y = apple.y;
 698:	99 81       	ldd	r25, Y+1	; 0x01
 69a:	11 96       	adiw	r26, 0x01	; 1
 69c:	9c 93       	st	X, r25
 69e:	11 97       	sbiw	r26, 0x01	; 1
			
			// Previous head will point to new head
			head->next = &snake[length];
 6a0:	a2 83       	std	Z+2, r26	; 0x02
 6a2:	b3 83       	std	Z+3, r27	; 0x03
			
			// Set new head
			head = &snake[length];
 6a4:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <head>
 6a8:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <head+0x1>
		
			length++;
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <length>
			
			movedir = 'u';
 6b2:	85 e7       	ldi	r24, 0x75	; 117
 6b4:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
			
			apple_eaten = 1;		
 6b8:	bd c1       	rjmp	.+890    	; 0xa34 <move_snake+0x424>
		}
		else
		{
			// Replace tail with point above head
			struct point *temp = (struct point*)tail->next;
 6ba:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <tail>
 6be:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <tail+0x1>
 6c2:	12 96       	adiw	r26, 0x02	; 2
 6c4:	2d 91       	ld	r18, X+
 6c6:	3c 91       	ld	r19, X
 6c8:	13 97       	sbiw	r26, 0x03	; 3
		
			tail->x = head->x;
 6ca:	80 81       	ld	r24, Z
 6cc:	8c 93       	st	X, r24
			tail->y = head->y + 1;
 6ce:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 6d2:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 6d6:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 6da:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 6de:	11 96       	adiw	r26, 0x01	; 1
 6e0:	8c 91       	ld	r24, X
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	81 83       	std	Z+1, r24	; 0x01
			tail->next = NULL;
 6e6:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 6ea:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 6ee:	12 82       	std	Z+2, r1	; 0x02
 6f0:	13 82       	std	Z+3, r1	; 0x03
			head->next = tail;
 6f2:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 6f6:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 6fa:	12 96       	adiw	r26, 0x02	; 2
 6fc:	ed 93       	st	X+, r30
 6fe:	fc 93       	st	X, r31
 700:	13 97       	sbiw	r26, 0x03	; 3
			head = tail;
 702:	e0 93 56 21 	sts	0x2156, r30	; 0x802156 <head>
 706:	f0 93 57 21 	sts	0x2157, r31	; 0x802157 <head+0x1>
			tail = temp;
 70a:	20 93 54 21 	sts	0x2154, r18	; 0x802154 <tail>
 70e:	30 93 55 21 	sts	0x2155, r19	; 0x802155 <tail+0x1>
			movedir = 'u';
 712:	85 e7       	ldi	r24, 0x75	; 117
 714:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
 718:	88 c1       	rjmp	.+784    	; 0xa2a <move_snake+0x41a>
		}
	}
	// Move down
	else if (dir == 'd' && movedir != 'u')
 71a:	84 36       	cpi	r24, 0x64	; 100
 71c:	09 f0       	breq	.+2      	; 0x720 <move_snake+0x110>
 71e:	80 c0       	rjmp	.+256    	; 0x820 <move_snake+0x210>
 720:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 724:	85 37       	cpi	r24, 0x75	; 117
 726:	09 f4       	brne	.+2      	; 0x72a <move_snake+0x11a>
 728:	80 c1       	rjmp	.+768    	; 0xa2a <move_snake+0x41a>
	{
		if (head->y <= 0)
 72a:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 72e:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 732:	81 81       	ldd	r24, Z+1	; 0x01
 734:	18 16       	cp	r1, r24
 736:	24 f0       	brlt	.+8      	; 0x740 <move_snake+0x130>
		{
			collide = 1;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 73e:	75 c1       	rjmp	.+746    	; 0xa2a <move_snake+0x41a>
		}
		else if (in_snake(head->x, head->y - 1))
 740:	61 81       	ldd	r22, Z+1	; 0x01
 742:	80 81       	ld	r24, Z
 744:	61 50       	subi	r22, 0x01	; 1
 746:	0e 94 81 02 	call	0x502	; 0x502 <in_snake>
 74a:	88 23       	and	r24, r24
 74c:	21 f0       	breq	.+8      	; 0x756 <move_snake+0x146>
		{
			collide = 2;
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 754:	6a c1       	rjmp	.+724    	; 0xa2a <move_snake+0x41a>
		}
		// Collide into apple
		else if (head->x == apple.x && head->y-1 == apple.y)
 756:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 75a:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 75e:	90 81       	ld	r25, Z
 760:	80 91 62 21 	lds	r24, 0x2162	; 0x802162 <apple>
 764:	98 13       	cpse	r25, r24
 766:	2c c0       	rjmp	.+88     	; 0x7c0 <move_snake+0x1b0>
 768:	81 81       	ldd	r24, Z+1	; 0x01
 76a:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <apple+0x1>
 76e:	08 2e       	mov	r0, r24
 770:	00 0c       	add	r0, r0
 772:	99 0b       	sbc	r25, r25
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	02 2e       	mov	r0, r18
 778:	00 0c       	add	r0, r0
 77a:	33 0b       	sbc	r19, r19
 77c:	82 17       	cp	r24, r18
 77e:	93 07       	cpc	r25, r19
 780:	f9 f4       	brne	.+62     	; 0x7c0 <move_snake+0x1b0>
		{
			// Add apple to the head of the snake
			snake[length].x = apple.x;
 782:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <length>
 786:	a8 2f       	mov	r26, r24
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	c2 e6       	ldi	r28, 0x62	; 98
 78c:	d1 e2       	ldi	r29, 0x21	; 33
 78e:	98 81       	ld	r25, Y
 790:	aa 0f       	add	r26, r26
 792:	bb 1f       	adc	r27, r27
 794:	aa 0f       	add	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	ad 5a       	subi	r26, 0xAD	; 173
 79a:	bf 4d       	sbci	r27, 0xDF	; 223
 79c:	9c 93       	st	X, r25
			snake[length].y = apple.y;
 79e:	99 81       	ldd	r25, Y+1	; 0x01
 7a0:	11 96       	adiw	r26, 0x01	; 1
 7a2:	9c 93       	st	X, r25
 7a4:	11 97       	sbiw	r26, 0x01	; 1
			
			// Previous head will point to new head
			head->next = &snake[length];
 7a6:	a2 83       	std	Z+2, r26	; 0x02
 7a8:	b3 83       	std	Z+3, r27	; 0x03
			
			// Set new head
			head = &snake[length];
 7aa:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <head>
 7ae:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <head+0x1>
		
			length++;
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <length>
			
			movedir = 'd';
 7b8:	84 e6       	ldi	r24, 0x64	; 100
 7ba:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
			
			apple_eaten = 1;		
 7be:	3a c1       	rjmp	.+628    	; 0xa34 <move_snake+0x424>
		}
		else
		{
			// Replace tail with point below head
			struct point *temp = (struct point*)tail->next;
 7c0:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <tail>
 7c4:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <tail+0x1>
 7c8:	12 96       	adiw	r26, 0x02	; 2
 7ca:	2d 91       	ld	r18, X+
 7cc:	3c 91       	ld	r19, X
 7ce:	13 97       	sbiw	r26, 0x03	; 3
		
			tail->x = head->x;
 7d0:	80 81       	ld	r24, Z
 7d2:	8c 93       	st	X, r24
			tail->y = head->y - 1;
 7d4:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 7d8:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 7dc:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 7e0:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 7e4:	11 96       	adiw	r26, 0x01	; 1
 7e6:	8c 91       	ld	r24, X
 7e8:	81 50       	subi	r24, 0x01	; 1
 7ea:	81 83       	std	Z+1, r24	; 0x01
			tail->next = NULL;
 7ec:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 7f0:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 7f4:	12 82       	std	Z+2, r1	; 0x02
 7f6:	13 82       	std	Z+3, r1	; 0x03
			head->next = tail;
 7f8:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 7fc:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 800:	12 96       	adiw	r26, 0x02	; 2
 802:	ed 93       	st	X+, r30
 804:	fc 93       	st	X, r31
 806:	13 97       	sbiw	r26, 0x03	; 3
			head = tail;
 808:	e0 93 56 21 	sts	0x2156, r30	; 0x802156 <head>
 80c:	f0 93 57 21 	sts	0x2157, r31	; 0x802157 <head+0x1>
			tail = temp;
 810:	20 93 54 21 	sts	0x2154, r18	; 0x802154 <tail>
 814:	30 93 55 21 	sts	0x2155, r19	; 0x802155 <tail+0x1>
			movedir = 'd';
 818:	84 e6       	ldi	r24, 0x64	; 100
 81a:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
 81e:	05 c1       	rjmp	.+522    	; 0xa2a <move_snake+0x41a>
		}
	}
	// Move right
	else if (dir == 'r' && movedir != 'l')
 820:	82 37       	cpi	r24, 0x72	; 114
 822:	09 f0       	breq	.+2      	; 0x826 <move_snake+0x216>
 824:	80 c0       	rjmp	.+256    	; 0x926 <move_snake+0x316>
 826:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 82a:	8c 36       	cpi	r24, 0x6C	; 108
 82c:	09 f4       	brne	.+2      	; 0x830 <move_snake+0x220>
 82e:	fd c0       	rjmp	.+506    	; 0xa2a <move_snake+0x41a>
	{
		if (head->x >= 7)
 830:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 834:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 838:	80 81       	ld	r24, Z
 83a:	87 30       	cpi	r24, 0x07	; 7
 83c:	24 f0       	brlt	.+8      	; 0x846 <move_snake+0x236>
		{
			collide = 1;
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 844:	f2 c0       	rjmp	.+484    	; 0xa2a <move_snake+0x41a>
		}
		else if (in_snake(head->x+1, head->y))
 846:	61 81       	ldd	r22, Z+1	; 0x01
 848:	80 81       	ld	r24, Z
 84a:	8f 5f       	subi	r24, 0xFF	; 255
 84c:	0e 94 81 02 	call	0x502	; 0x502 <in_snake>
 850:	88 23       	and	r24, r24
 852:	21 f0       	breq	.+8      	; 0x85c <move_snake+0x24c>
		{
			collide = 2;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 85a:	e7 c0       	rjmp	.+462    	; 0xa2a <move_snake+0x41a>
		}
		// Collide into apple
		else if (head->x+1 == apple.x && head->y == apple.y)
 85c:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 860:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 864:	80 81       	ld	r24, Z
 866:	20 91 62 21 	lds	r18, 0x2162	; 0x802162 <apple>
 86a:	08 2e       	mov	r0, r24
 86c:	00 0c       	add	r0, r0
 86e:	99 0b       	sbc	r25, r25
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	02 2e       	mov	r0, r18
 874:	00 0c       	add	r0, r0
 876:	33 0b       	sbc	r19, r19
 878:	82 17       	cp	r24, r18
 87a:	93 07       	cpc	r25, r19
 87c:	21 f5       	brne	.+72     	; 0x8c6 <move_snake+0x2b6>
 87e:	91 81       	ldd	r25, Z+1	; 0x01
 880:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <apple+0x1>
 884:	98 13       	cpse	r25, r24
 886:	1f c0       	rjmp	.+62     	; 0x8c6 <move_snake+0x2b6>
		{
			// Add apple to the head of the snake
			snake[length].x = apple.x;
 888:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <length>
 88c:	a8 2f       	mov	r26, r24
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	c2 e6       	ldi	r28, 0x62	; 98
 892:	d1 e2       	ldi	r29, 0x21	; 33
 894:	98 81       	ld	r25, Y
 896:	aa 0f       	add	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	aa 0f       	add	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	ad 5a       	subi	r26, 0xAD	; 173
 8a0:	bf 4d       	sbci	r27, 0xDF	; 223
 8a2:	9c 93       	st	X, r25
			snake[length].y = apple.y;
 8a4:	99 81       	ldd	r25, Y+1	; 0x01
 8a6:	11 96       	adiw	r26, 0x01	; 1
 8a8:	9c 93       	st	X, r25
 8aa:	11 97       	sbiw	r26, 0x01	; 1
			
			// Previous head will point to new head
			head->next = &snake[length];
 8ac:	a2 83       	std	Z+2, r26	; 0x02
 8ae:	b3 83       	std	Z+3, r27	; 0x03
			
			// Set new head
			head = &snake[length];
 8b0:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <head>
 8b4:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <head+0x1>
		
			length++;
 8b8:	8f 5f       	subi	r24, 0xFF	; 255
 8ba:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <length>
			
			movedir = 'r';
 8be:	82 e7       	ldi	r24, 0x72	; 114
 8c0:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
			
			apple_eaten = 1;		
 8c4:	b7 c0       	rjmp	.+366    	; 0xa34 <move_snake+0x424>
		}		
		else
		{
			// Replace tail with point below head
			struct point *temp = (struct point*)tail->next;
 8c6:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <tail>
 8ca:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <tail+0x1>
 8ce:	12 96       	adiw	r26, 0x02	; 2
 8d0:	2d 91       	ld	r18, X+
 8d2:	3c 91       	ld	r19, X
 8d4:	13 97       	sbiw	r26, 0x03	; 3
		
			tail->x = head->x + 1;
 8d6:	80 81       	ld	r24, Z
 8d8:	8f 5f       	subi	r24, 0xFF	; 255
 8da:	8c 93       	st	X, r24
			tail->y = head->y;
 8dc:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 8e0:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 8e4:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 8e8:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 8ec:	11 96       	adiw	r26, 0x01	; 1
 8ee:	8c 91       	ld	r24, X
 8f0:	81 83       	std	Z+1, r24	; 0x01
			tail->next = NULL;
 8f2:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 8f6:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 8fa:	12 82       	std	Z+2, r1	; 0x02
 8fc:	13 82       	std	Z+3, r1	; 0x03
			head->next = tail;
 8fe:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 902:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 906:	12 96       	adiw	r26, 0x02	; 2
 908:	ed 93       	st	X+, r30
 90a:	fc 93       	st	X, r31
 90c:	13 97       	sbiw	r26, 0x03	; 3
			head = tail;
 90e:	e0 93 56 21 	sts	0x2156, r30	; 0x802156 <head>
 912:	f0 93 57 21 	sts	0x2157, r31	; 0x802157 <head+0x1>
			tail = temp;
 916:	20 93 54 21 	sts	0x2154, r18	; 0x802154 <tail>
 91a:	30 93 55 21 	sts	0x2155, r19	; 0x802155 <tail+0x1>
			movedir = 'r';
 91e:	82 e7       	ldi	r24, 0x72	; 114
 920:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
 924:	82 c0       	rjmp	.+260    	; 0xa2a <move_snake+0x41a>
		}
	}
	// Move left
	else if (dir == 'l' && movedir != 'r')
 926:	8c 36       	cpi	r24, 0x6C	; 108
 928:	09 f0       	breq	.+2      	; 0x92c <move_snake+0x31c>
 92a:	7f c0       	rjmp	.+254    	; 0xa2a <move_snake+0x41a>
 92c:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 930:	82 37       	cpi	r24, 0x72	; 114
 932:	09 f4       	brne	.+2      	; 0x936 <move_snake+0x326>
 934:	7a c0       	rjmp	.+244    	; 0xa2a <move_snake+0x41a>
	{
		if (head->x <= 0)
 936:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 93a:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 93e:	80 81       	ld	r24, Z
 940:	18 16       	cp	r1, r24
 942:	24 f0       	brlt	.+8      	; 0x94c <move_snake+0x33c>
		{
			collide = 1;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 94a:	6f c0       	rjmp	.+222    	; 0xa2a <move_snake+0x41a>
		}
		else if (in_snake(head->x-1, head->y))
 94c:	61 81       	ldd	r22, Z+1	; 0x01
 94e:	80 81       	ld	r24, Z
 950:	81 50       	subi	r24, 0x01	; 1
 952:	0e 94 81 02 	call	0x502	; 0x502 <in_snake>
 956:	88 23       	and	r24, r24
 958:	21 f0       	breq	.+8      	; 0x962 <move_snake+0x352>
		{
			collide = 2;
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
 960:	64 c0       	rjmp	.+200    	; 0xa2a <move_snake+0x41a>
		}
		// Collide into apple
		else if (head->x-1 == apple.x && head->y == apple.y)
 962:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <head>
 966:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <head+0x1>
 96a:	80 81       	ld	r24, Z
 96c:	20 91 62 21 	lds	r18, 0x2162	; 0x802162 <apple>
 970:	08 2e       	mov	r0, r24
 972:	00 0c       	add	r0, r0
 974:	99 0b       	sbc	r25, r25
 976:	01 97       	sbiw	r24, 0x01	; 1
 978:	02 2e       	mov	r0, r18
 97a:	00 0c       	add	r0, r0
 97c:	33 0b       	sbc	r19, r19
 97e:	82 17       	cp	r24, r18
 980:	93 07       	cpc	r25, r19
 982:	21 f5       	brne	.+72     	; 0x9cc <move_snake+0x3bc>
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <apple+0x1>
 98a:	98 13       	cpse	r25, r24
 98c:	1f c0       	rjmp	.+62     	; 0x9cc <move_snake+0x3bc>
		{
			// Add apple to the head of the snake
			snake[length].x = apple.x;
 98e:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <length>
 992:	a8 2f       	mov	r26, r24
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	c2 e6       	ldi	r28, 0x62	; 98
 998:	d1 e2       	ldi	r29, 0x21	; 33
 99a:	98 81       	ld	r25, Y
 99c:	aa 0f       	add	r26, r26
 99e:	bb 1f       	adc	r27, r27
 9a0:	aa 0f       	add	r26, r26
 9a2:	bb 1f       	adc	r27, r27
 9a4:	ad 5a       	subi	r26, 0xAD	; 173
 9a6:	bf 4d       	sbci	r27, 0xDF	; 223
 9a8:	9c 93       	st	X, r25
			snake[length].y = apple.y;
 9aa:	99 81       	ldd	r25, Y+1	; 0x01
 9ac:	11 96       	adiw	r26, 0x01	; 1
 9ae:	9c 93       	st	X, r25
 9b0:	11 97       	sbiw	r26, 0x01	; 1
			
			// Previous head will point to new head
			head->next = &snake[length];
 9b2:	a2 83       	std	Z+2, r26	; 0x02
 9b4:	b3 83       	std	Z+3, r27	; 0x03
			
			// Set new head
			head = &snake[length];
 9b6:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <head>
 9ba:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <head+0x1>
		
			length++;
 9be:	8f 5f       	subi	r24, 0xFF	; 255
 9c0:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <length>
			
			movedir = 'l';
 9c4:	8c e6       	ldi	r24, 0x6C	; 108
 9c6:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
			
			apple_eaten = 1;		
 9ca:	34 c0       	rjmp	.+104    	; 0xa34 <move_snake+0x424>
		}		
		else
		{
			// Replace tail with point below head
			struct point *temp = (struct point*)(tail->next);
 9cc:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <tail>
 9d0:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <tail+0x1>
 9d4:	12 96       	adiw	r26, 0x02	; 2
 9d6:	2d 91       	ld	r18, X+
 9d8:	3c 91       	ld	r19, X
 9da:	13 97       	sbiw	r26, 0x03	; 3
		
			tail->x = head->x - 1;
 9dc:	80 81       	ld	r24, Z
 9de:	81 50       	subi	r24, 0x01	; 1
 9e0:	8c 93       	st	X, r24
			tail->y = head->y;
 9e2:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 9e6:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 9ea:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 9ee:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 9f2:	11 96       	adiw	r26, 0x01	; 1
 9f4:	8c 91       	ld	r24, X
 9f6:	81 83       	std	Z+1, r24	; 0x01
			tail->next = NULL;
 9f8:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tail>
 9fc:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tail+0x1>
 a00:	12 82       	std	Z+2, r1	; 0x02
 a02:	13 82       	std	Z+3, r1	; 0x03
			head->next = tail;
 a04:	a0 91 56 21 	lds	r26, 0x2156	; 0x802156 <head>
 a08:	b0 91 57 21 	lds	r27, 0x2157	; 0x802157 <head+0x1>
 a0c:	12 96       	adiw	r26, 0x02	; 2
 a0e:	ed 93       	st	X+, r30
 a10:	fc 93       	st	X, r31
 a12:	13 97       	sbiw	r26, 0x03	; 3
			head = tail;
 a14:	e0 93 56 21 	sts	0x2156, r30	; 0x802156 <head>
 a18:	f0 93 57 21 	sts	0x2157, r31	; 0x802157 <head+0x1>
			tail = temp;
 a1c:	20 93 54 21 	sts	0x2154, r18	; 0x802154 <tail>
 a20:	30 93 55 21 	sts	0x2155, r19	; 0x802155 <tail+0x1>
			movedir = 'l';
 a24:	8c e6       	ldi	r24, 0x6C	; 108
 a26:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <movedir>
	{
		apple_new();
	}

	// Update image
	clear_matrix();
 a2a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <clear_matrix>
	draw_snake();	
 a2e:	0e 94 06 02 	call	0x40c	; 0x40c <draw_snake>
}
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <move_snake+0x42a>
		}
	}

	if (apple_eaten)
	{
		apple_new();
 a34:	0e 94 e5 02 	call	0x5ca	; 0x5ca <apple_new>
 a38:	f8 cf       	rjmp	.-16     	; 0xa2a <move_snake+0x41a>
	}

	// Update image
	clear_matrix();
	draw_snake();	
}
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	08 95       	ret

00000a40 <display_score>:
	apple.x = x;
	apple.y = y;
}

void display_score(uint8_t score)
{
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	28 97       	sbiw	r28, 0x08	; 8
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	de bf       	out	0x3e, r29	; 62
 a4e:	9d ec       	ldi	r25, 0xCD	; 205
 a50:	89 9f       	mul	r24, r25
 a52:	91 2d       	mov	r25, r1
 a54:	11 24       	eor	r1, r1
 a56:	96 95       	lsr	r25
 a58:	96 95       	lsr	r25
 a5a:	96 95       	lsr	r25
 a5c:	29 2f       	mov	r18, r25
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	22 0f       	add	r18, r18
 a62:	33 1f       	adc	r19, r19
 a64:	22 0f       	add	r18, r18
 a66:	33 1f       	adc	r19, r19
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	20 50       	subi	r18, 0x00	; 0
 a6e:	30 4e       	sbci	r19, 0xE0	; 224
 a70:	99 0f       	add	r25, r25
 a72:	49 2f       	mov	r20, r25
 a74:	44 0f       	add	r20, r20
 a76:	44 0f       	add	r20, r20
 a78:	94 0f       	add	r25, r20
 a7a:	89 1b       	sub	r24, r25
 a7c:	e8 2f       	mov	r30, r24
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	ee 0f       	add	r30, r30
 a86:	ff 1f       	adc	r31, r31
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	bf 01       	movw	r22, r30
 a8e:	60 50       	subi	r22, 0x00	; 0
 a90:	70 4e       	sbci	r23, 0xE0	; 224
 a92:	de 01       	movw	r26, r28
 a94:	11 96       	adiw	r26, 0x01	; 1
 a96:	ae 01       	movw	r20, r28
 a98:	47 5f       	subi	r20, 0xF7	; 247
 a9a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	uint8_t both_digits[8];
	
	for (uint8_t i = 0; i < 8; i++)
	{
		uint8_t tens_display = digits[tens][i] << 5;
 a9c:	f9 01       	movw	r30, r18
 a9e:	81 91       	ld	r24, Z+
 aa0:	9f 01       	movw	r18, r30
		both_digits[i] = tens_display | digits[ones][i];
 aa2:	fb 01       	movw	r30, r22
 aa4:	91 91       	ld	r25, Z+
 aa6:	bf 01       	movw	r22, r30
 aa8:	82 95       	swap	r24
 aaa:	88 0f       	add	r24, r24
 aac:	80 7e       	andi	r24, 0xE0	; 224
 aae:	89 2b       	or	r24, r25
 ab0:	8d 93       	st	X+, r24
	uint8_t ones = score%10;
	uint8_t tens = (score/10);
	
	uint8_t both_digits[8];
	
	for (uint8_t i = 0; i < 8; i++)
 ab2:	a4 17       	cp	r26, r20
 ab4:	b5 07       	cpc	r27, r21
 ab6:	91 f7       	brne	.-28     	; 0xa9c <display_score+0x5c>
	{
		uint8_t tens_display = digits[tens][i] << 5;
		both_digits[i] = tens_display | digits[ones][i];
	}
	
	display_image(both_digits);
 ab8:	ce 01       	movw	r24, r28
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <display_image>
			
}
 ac0:	28 96       	adiw	r28, 0x08	; 8
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	de bf       	out	0x3e, r29	; 62
 ac6:	df 91       	pop	r29
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

00000acc <main>:
void display_score(uint8_t score);

int main(void)
{
	// Changes clock speed to 32 MHz
	clock_init();
 acc:	0e 94 26 01 	call	0x24c	; 0x24c <clock_init>
	
	clear_matrix();
 ad0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <clear_matrix>

	// Initializing
	matrix_init();	
 ad4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <matrix_init>
	refreshmatrix_init();
 ad8:	0e 94 ca 01 	call	0x394	; 0x394 <refreshmatrix_init>
	joystick_adc_init();
 adc:	0e 94 3c 01 	call	0x278	; 0x278 <joystick_adc_init>
	joystick_tcc1_init();
 ae0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <joystick_tcc1_init>

	// Initializing Snake
	snake_init();
 ae4:	0e 94 b0 02 	call	0x560	; 0x560 <snake_init>
	automove_init();
 ae8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <automove_init>

	// Enabling global interrupts
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 aec:	87 e0       	ldi	r24, 0x07	; 7
 aee:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 af2:	78 94       	sei
			display_image(collide_self_image);
		input = get_direction();
		*/
		
		// Disabling automove
		TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
 af4:	c0 e4       	ldi	r28, 0x40	; 64
 af6:	d9 e0       	ldi	r29, 0x09	; 9
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <main+0x36>
	while (1)
	{
		// Game is running
		while (!collide)
		{
			input = get_direction();
 afa:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_direction>
 afe:	80 93 51 20 	sts	0x2051, r24	; 0x802051 <input>
	sei();

	while (1)
	{
		// Game is running
		while (!collide)
 b02:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <__data_end>
 b06:	88 23       	and	r24, r24
 b08:	c1 f3       	breq	.-16     	; 0xafa <main+0x2e>
			display_image(collide_self_image);
		input = get_direction();
		*/
		
		// Disabling automove
		TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
 b0a:	1e 82       	std	Y+6, r1	; 0x06
		
		display_score(length-3);
 b0c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <length>
 b10:	83 50       	subi	r24, 0x03	; 3
 b12:	0e 94 20 05 	call	0xa40	; 0xa40 <display_score>

		input = get_direction();
 b16:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_direction>
 b1a:	80 93 51 20 	sts	0x2051, r24	; 0x802051 <input>
		
		if (input != 0)
 b1e:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 b22:	88 23       	and	r24, r24
 b24:	71 f3       	breq	.-36     	; 0xb02 <main+0x36>
		{
			collide = 0;
 b26:	10 92 50 20 	sts	0x2050, r1	; 0x802050 <__data_end>
			snake_init();
 b2a:	0e 94 b0 02 	call	0x560	; 0x560 <snake_init>
			automove_init();
 b2e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <automove_init>
 b32:	e7 cf       	rjmp	.-50     	; 0xb02 <main+0x36>

00000b34 <__vector_14>:

// Interrupt service routines

// Refresh matrix
ISR(TCC0_OVF_vect)
{
 b34:	1f 92       	push	r1
 b36:	0f 92       	push	r0
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	0f 92       	push	r0
 b3c:	11 24       	eor	r1, r1
 b3e:	08 b6       	in	r0, 0x38	; 56
 b40:	0f 92       	push	r0
 b42:	18 be       	out	0x38, r1	; 56
 b44:	09 b6       	in	r0, 0x39	; 57
 b46:	0f 92       	push	r0
 b48:	19 be       	out	0x39, r1	; 57
 b4a:	0b b6       	in	r0, 0x3b	; 59
 b4c:	0f 92       	push	r0
 b4e:	1b be       	out	0x3b, r1	; 59
 b50:	2f 93       	push	r18
 b52:	3f 93       	push	r19
 b54:	4f 93       	push	r20
 b56:	5f 93       	push	r21
 b58:	6f 93       	push	r22
 b5a:	7f 93       	push	r23
 b5c:	8f 93       	push	r24
 b5e:	9f 93       	push	r25
 b60:	af 93       	push	r26
 b62:	bf 93       	push	r27
 b64:	ef 93       	push	r30
 b66:	ff 93       	push	r31
	// Displays next row
	matrix_turnon(led_matrix[row_count],row_count);
 b68:	60 91 52 20 	lds	r22, 0x2052	; 0x802052 <row_count>
 b6c:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <row_count>
 b70:	f0 e0       	ldi	r31, 0x00	; 0
 b72:	e6 5a       	subi	r30, 0xA6	; 166
 b74:	fe 4d       	sbci	r31, 0xDE	; 222
 b76:	80 81       	ld	r24, Z
 b78:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <matrix_turnon>
	row_count++;
 b7c:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <row_count>
 b80:	8f 5f       	subi	r24, 0xFF	; 255
 b82:	80 93 52 20 	sts	0x2052, r24	; 0x802052 <row_count>
	if (row_count == 8)
 b86:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <row_count>
 b8a:	88 30       	cpi	r24, 0x08	; 8
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__vector_14+0x5e>
	{
		row_count = 0;
 b8e:	10 92 52 20 	sts	0x2052, r1	; 0x802052 <row_count>
	}
}
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	7f 91       	pop	r23
 ba0:	6f 91       	pop	r22
 ba2:	5f 91       	pop	r21
 ba4:	4f 91       	pop	r20
 ba6:	3f 91       	pop	r19
 ba8:	2f 91       	pop	r18
 baa:	0f 90       	pop	r0
 bac:	0b be       	out	0x3b, r0	; 59
 bae:	0f 90       	pop	r0
 bb0:	09 be       	out	0x39, r0	; 57
 bb2:	0f 90       	pop	r0
 bb4:	08 be       	out	0x38, r0	; 56
 bb6:	0f 90       	pop	r0
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	0f 90       	pop	r0
 bbc:	1f 90       	pop	r1
 bbe:	18 95       	reti

00000bc0 <__vector_83>:

// Auto-move snake
ISR(TCD1_OVF_vect)
{
 bc0:	1f 92       	push	r1
 bc2:	0f 92       	push	r0
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	0f 92       	push	r0
 bc8:	11 24       	eor	r1, r1
 bca:	08 b6       	in	r0, 0x38	; 56
 bcc:	0f 92       	push	r0
 bce:	18 be       	out	0x38, r1	; 56
 bd0:	09 b6       	in	r0, 0x39	; 57
 bd2:	0f 92       	push	r0
 bd4:	19 be       	out	0x39, r1	; 57
 bd6:	0b b6       	in	r0, 0x3b	; 59
 bd8:	0f 92       	push	r0
 bda:	1b be       	out	0x3b, r1	; 59
 bdc:	2f 93       	push	r18
 bde:	3f 93       	push	r19
 be0:	4f 93       	push	r20
 be2:	5f 93       	push	r21
 be4:	6f 93       	push	r22
 be6:	7f 93       	push	r23
 be8:	8f 93       	push	r24
 bea:	9f 93       	push	r25
 bec:	af 93       	push	r26
 bee:	bf 93       	push	r27
 bf0:	ef 93       	push	r30
 bf2:	ff 93       	push	r31
	// Preventing from moving into itself
	if ((input == 'u' && movedir != 'd') || (input == 'd' && movedir != 'u') || (input == 'r' && movedir != 'l') || (input == 'l' && movedir != 'r'))
 bf4:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 bf8:	85 37       	cpi	r24, 0x75	; 117
 bfa:	21 f4       	brne	.+8      	; 0xc04 <__vector_83+0x44>
 bfc:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 c00:	84 36       	cpi	r24, 0x64	; 100
 c02:	c1 f4       	brne	.+48     	; 0xc34 <__vector_83+0x74>
 c04:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 c08:	84 36       	cpi	r24, 0x64	; 100
 c0a:	21 f4       	brne	.+8      	; 0xc14 <__vector_83+0x54>
 c0c:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 c10:	85 37       	cpi	r24, 0x75	; 117
 c12:	81 f4       	brne	.+32     	; 0xc34 <__vector_83+0x74>
 c14:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 c18:	82 37       	cpi	r24, 0x72	; 114
 c1a:	21 f4       	brne	.+8      	; 0xc24 <__vector_83+0x64>
 c1c:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 c20:	8c 36       	cpi	r24, 0x6C	; 108
 c22:	41 f4       	brne	.+16     	; 0xc34 <__vector_83+0x74>
 c24:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 c28:	8c 36       	cpi	r24, 0x6C	; 108
 c2a:	49 f4       	brne	.+18     	; 0xc3e <__vector_83+0x7e>
 c2c:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 c30:	82 37       	cpi	r24, 0x72	; 114
 c32:	29 f0       	breq	.+10     	; 0xc3e <__vector_83+0x7e>
		move_snake(input);
 c34:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <input>
 c38:	0e 94 08 03 	call	0x610	; 0x610 <move_snake>
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__vector_83+0x86>
	else
	{
		move_snake(movedir);
 c3e:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <movedir>
 c42:	0e 94 08 03 	call	0x610	; 0x610 <move_snake>
	}
}
 c46:	ff 91       	pop	r31
 c48:	ef 91       	pop	r30
 c4a:	bf 91       	pop	r27
 c4c:	af 91       	pop	r26
 c4e:	9f 91       	pop	r25
 c50:	8f 91       	pop	r24
 c52:	7f 91       	pop	r23
 c54:	6f 91       	pop	r22
 c56:	5f 91       	pop	r21
 c58:	4f 91       	pop	r20
 c5a:	3f 91       	pop	r19
 c5c:	2f 91       	pop	r18
 c5e:	0f 90       	pop	r0
 c60:	0b be       	out	0x3b, r0	; 59
 c62:	0f 90       	pop	r0
 c64:	09 be       	out	0x39, r0	; 57
 c66:	0f 90       	pop	r0
 c68:	08 be       	out	0x38, r0	; 56
 c6a:	0f 90       	pop	r0
 c6c:	0f be       	out	0x3f, r0	; 63
 c6e:	0f 90       	pop	r0
 c70:	1f 90       	pop	r1
 c72:	18 95       	reti

00000c74 <__vector_71>:

// X axis ADC
ISR(ADCA_CH0_vect)
{
 c74:	1f 92       	push	r1
 c76:	0f 92       	push	r0
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	0f 92       	push	r0
 c7c:	11 24       	eor	r1, r1
 c7e:	08 b6       	in	r0, 0x38	; 56
 c80:	0f 92       	push	r0
 c82:	18 be       	out	0x38, r1	; 56
 c84:	8f 93       	push	r24
 c86:	9f 93       	push	r25
	x_axis = ADCA.CH0.RES;
 c88:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 c8c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 c90:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <x_axis>
 c94:	90 93 59 21 	sts	0x2159, r25	; 0x802159 <x_axis+0x1>
}
 c98:	9f 91       	pop	r25
 c9a:	8f 91       	pop	r24
 c9c:	0f 90       	pop	r0
 c9e:	08 be       	out	0x38, r0	; 56
 ca0:	0f 90       	pop	r0
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	0f 90       	pop	r0
 ca6:	1f 90       	pop	r1
 ca8:	18 95       	reti

00000caa <__vector_72>:

// Y axis ADC
ISR(ADCA_CH1_vect)
{
 caa:	1f 92       	push	r1
 cac:	0f 92       	push	r0
 cae:	0f b6       	in	r0, 0x3f	; 63
 cb0:	0f 92       	push	r0
 cb2:	11 24       	eor	r1, r1
 cb4:	08 b6       	in	r0, 0x38	; 56
 cb6:	0f 92       	push	r0
 cb8:	18 be       	out	0x38, r1	; 56
 cba:	8f 93       	push	r24
 cbc:	9f 93       	push	r25
	y_axis = ADCA.CH1.RES;
 cbe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
 cc2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
 cc6:	80 93 66 21 	sts	0x2166, r24	; 0x802166 <y_axis>
 cca:	90 93 67 21 	sts	0x2167, r25	; 0x802167 <y_axis+0x1>
 cce:	9f 91       	pop	r25
 cd0:	8f 91       	pop	r24
 cd2:	0f 90       	pop	r0
 cd4:	08 be       	out	0x38, r0	; 56
 cd6:	0f 90       	pop	r0
 cd8:	0f be       	out	0x3f, r0	; 63
 cda:	0f 90       	pop	r0
 cdc:	1f 90       	pop	r1
 cde:	18 95       	reti

00000ce0 <_exit>:
 ce0:	f8 94       	cli

00000ce2 <__stop_program>:
 ce2:	ff cf       	rjmp	.-2      	; 0xce2 <__stop_program>
